/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  PDFSource,
} from 'pdfjs-dist';

declare global {

  namespace StencilComponents {
    interface HivePdfDocumentPropertiesDialog {

    }
  }

  interface HTMLHivePdfDocumentPropertiesDialogElement extends StencilComponents.HivePdfDocumentPropertiesDialog, HTMLStencilElement {}

  var HTMLHivePdfDocumentPropertiesDialogElement: {
    prototype: HTMLHivePdfDocumentPropertiesDialogElement;
    new (): HTMLHivePdfDocumentPropertiesDialogElement;
  };
  interface HTMLElementTagNameMap {
    'hive-pdf-document-properties-dialog': HTMLHivePdfDocumentPropertiesDialogElement;
  }
  interface ElementTagNameMap {
    'hive-pdf-document-properties-dialog': HTMLHivePdfDocumentPropertiesDialogElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'hive-pdf-document-properties-dialog': JSXElements.HivePdfDocumentPropertiesDialogAttributes;
    }
  }
  namespace JSXElements {
    export interface HivePdfDocumentPropertiesDialogAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface HivePdfErrorWrapper {

    }
  }

  interface HTMLHivePdfErrorWrapperElement extends StencilComponents.HivePdfErrorWrapper, HTMLStencilElement {}

  var HTMLHivePdfErrorWrapperElement: {
    prototype: HTMLHivePdfErrorWrapperElement;
    new (): HTMLHivePdfErrorWrapperElement;
  };
  interface HTMLElementTagNameMap {
    'hive-pdf-error-wrapper': HTMLHivePdfErrorWrapperElement;
  }
  interface ElementTagNameMap {
    'hive-pdf-error-wrapper': HTMLHivePdfErrorWrapperElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'hive-pdf-error-wrapper': JSXElements.HivePdfErrorWrapperAttributes;
    }
  }
  namespace JSXElements {
    export interface HivePdfErrorWrapperAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface HivePdfFindbar {

    }
  }

  interface HTMLHivePdfFindbarElement extends StencilComponents.HivePdfFindbar, HTMLStencilElement {}

  var HTMLHivePdfFindbarElement: {
    prototype: HTMLHivePdfFindbarElement;
    new (): HTMLHivePdfFindbarElement;
  };
  interface HTMLElementTagNameMap {
    'hive-pdf-findbar': HTMLHivePdfFindbarElement;
  }
  interface ElementTagNameMap {
    'hive-pdf-findbar': HTMLHivePdfFindbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'hive-pdf-findbar': JSXElements.HivePdfFindbarAttributes;
    }
  }
  namespace JSXElements {
    export interface HivePdfFindbarAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface HivePdfPasswordDialog {

    }
  }

  interface HTMLHivePdfPasswordDialogElement extends StencilComponents.HivePdfPasswordDialog, HTMLStencilElement {}

  var HTMLHivePdfPasswordDialogElement: {
    prototype: HTMLHivePdfPasswordDialogElement;
    new (): HTMLHivePdfPasswordDialogElement;
  };
  interface HTMLElementTagNameMap {
    'hive-pdf-password-dialog': HTMLHivePdfPasswordDialogElement;
  }
  interface ElementTagNameMap {
    'hive-pdf-password-dialog': HTMLHivePdfPasswordDialogElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'hive-pdf-password-dialog': JSXElements.HivePdfPasswordDialogAttributes;
    }
  }
  namespace JSXElements {
    export interface HivePdfPasswordDialogAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface HivePdfSecondaryToolbar {

    }
  }

  interface HTMLHivePdfSecondaryToolbarElement extends StencilComponents.HivePdfSecondaryToolbar, HTMLStencilElement {}

  var HTMLHivePdfSecondaryToolbarElement: {
    prototype: HTMLHivePdfSecondaryToolbarElement;
    new (): HTMLHivePdfSecondaryToolbarElement;
  };
  interface HTMLElementTagNameMap {
    'hive-pdf-secondary-toolbar': HTMLHivePdfSecondaryToolbarElement;
  }
  interface ElementTagNameMap {
    'hive-pdf-secondary-toolbar': HTMLHivePdfSecondaryToolbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'hive-pdf-secondary-toolbar': JSXElements.HivePdfSecondaryToolbarAttributes;
    }
  }
  namespace JSXElements {
    export interface HivePdfSecondaryToolbarAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface HivePdfSidebar {

    }
  }

  interface HTMLHivePdfSidebarElement extends StencilComponents.HivePdfSidebar, HTMLStencilElement {}

  var HTMLHivePdfSidebarElement: {
    prototype: HTMLHivePdfSidebarElement;
    new (): HTMLHivePdfSidebarElement;
  };
  interface HTMLElementTagNameMap {
    'hive-pdf-sidebar': HTMLHivePdfSidebarElement;
  }
  interface ElementTagNameMap {
    'hive-pdf-sidebar': HTMLHivePdfSidebarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'hive-pdf-sidebar': JSXElements.HivePdfSidebarAttributes;
    }
  }
  namespace JSXElements {
    export interface HivePdfSidebarAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface HivePdfToolbarBtn {
      'title': string;
    }
  }

  interface HTMLHivePdfToolbarBtnElement extends StencilComponents.HivePdfToolbarBtn, HTMLStencilElement {}

  var HTMLHivePdfToolbarBtnElement: {
    prototype: HTMLHivePdfToolbarBtnElement;
    new (): HTMLHivePdfToolbarBtnElement;
  };
  interface HTMLElementTagNameMap {
    'hive-pdf-toolbar-btn': HTMLHivePdfToolbarBtnElement;
  }
  interface ElementTagNameMap {
    'hive-pdf-toolbar-btn': HTMLHivePdfToolbarBtnElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'hive-pdf-toolbar-btn': JSXElements.HivePdfToolbarBtnAttributes;
    }
  }
  namespace JSXElements {
    export interface HivePdfToolbarBtnAttributes extends HTMLAttributes {
      'title'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface HivePdfToolbar {

    }
  }

  interface HTMLHivePdfToolbarElement extends StencilComponents.HivePdfToolbar, HTMLStencilElement {}

  var HTMLHivePdfToolbarElement: {
    prototype: HTMLHivePdfToolbarElement;
    new (): HTMLHivePdfToolbarElement;
  };
  interface HTMLElementTagNameMap {
    'hive-pdf-toolbar': HTMLHivePdfToolbarElement;
  }
  interface ElementTagNameMap {
    'hive-pdf-toolbar': HTMLHivePdfToolbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'hive-pdf-toolbar': JSXElements.HivePdfToolbarAttributes;
    }
  }
  namespace JSXElements {
    export interface HivePdfToolbarAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface HivePdfViewer {
      'baseUrl': string;
      'cMapPacked': boolean;
      'cMapUrl': string;
      /**
       * The cursor tool that is enabled upon load.\n 0 = Text selection tool.\n 1 = Hand tool.
       */
      'cursorToolOnLoad': 0 | 1;
      /**
       * Default zoom level of the viewer. Accepted values: 'auto', 'page-actual', 'page-width', 'page-height', 'page-fit', or a zoom level in percents.
       */
      'defaultZoomValue': string;
      'disableAutoFetch': boolean;
      'disableCreateObjectURL': boolean;
      /**
       * Whether to disable @font-face and fall back to canvas rendering (this is more resource-intensive).
       */
      'disableFontFace': boolean;
      'disableHistory': boolean;
      'disablePageLabels': boolean;
      'disablePageMode': boolean;
      /**
       * Whether to disable range requests (not recommended).
       */
      'disableRange': boolean;
      /**
       * Whether to disable streaming for requests (not recommended).
       */
      'disableStream': boolean;
      /**
       * Whether to prevent the extension from reporting the extension and browser version to the extension developers.
       */
      'disableTelemetry': boolean;
      /**
       * When enabled, pages whose orientation differ from the first page are rotated when printed.
       */
      'enablePrintAutoRotate': boolean;
      /**
       * Whether to enable WebGL.
       */
      'enableWebGL': boolean;
      'externalLinkRel': 'noopener' | 'noreferrer' | 'nofollow';
      /**
       * Controls how external links will be opened.\n 0 = default.\n 1 = replaces current window.\n 2 = new window/tab.\n 3 = parent.\n 4 = in top window.
       */
      'externalLinkTarget': 0 | 1 | 2 | 3 | 4;
      'imageResourcesPath': string;
      'locale': string;
      'maxCanvasPixels': number;
      'page': number;
      /**
       * Whether to enable debugging tools.
       */
      'pdfBugEnabled': boolean;
      'renderInteractiveForms': boolean;
      'renderer': 'canvas' | 'svg';
      /**
       * Controls how the viewer scrolls upon load.\n 0 = Vertical scrolling.\n 1 = Horizontal scrolling.\n 2 = Wrapped scrolling.
       */
      'scrollModeOnLoad': number;
      /**
       * Whether to view PDF documents in the last page and position upon opening the viewer.
       */
      'showPreviousViewOnLoad': boolean;
      /**
       * Controls the state of the sidebar upon load.\n 0 = do not show sidebar.\n 1 = show thumbnails in sidebar.\n 2 = show document outline in sidebar.\n 3 = Show attachments in sidebar.
       */
      'sidebarViewOnLoad': 0 | 1 | 2 | 3;
      'singlePageMode': boolean;
      /**
       * "Whether the viewer should join pages into spreads upon load.\n 0 = No spreads.\n 1 = Odd spreads.\n 2 = Even spreads.
       */
      'spreadModeOnLoad': 0 | 1 | 2;
      'supportsPrinting': boolean;
      /**
       * Controls if the text layer is enabled, and the selection mode that is used.\n 0 = Disabled.\n 1 = Enabled.\n 2 = (Experimental) Enabled, with enhanced text selection.
       */
      'textLayerMode': 0 | 1 | 2;
      'url': string | Uint8Array | PDFSource;
      'useOnlyCssZoom': boolean;
    }
  }

  interface HTMLHivePdfViewerElement extends StencilComponents.HivePdfViewer, HTMLStencilElement {}

  var HTMLHivePdfViewerElement: {
    prototype: HTMLHivePdfViewerElement;
    new (): HTMLHivePdfViewerElement;
  };
  interface HTMLElementTagNameMap {
    'hive-pdf-viewer': HTMLHivePdfViewerElement;
  }
  interface ElementTagNameMap {
    'hive-pdf-viewer': HTMLHivePdfViewerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'hive-pdf-viewer': JSXElements.HivePdfViewerAttributes;
    }
  }
  namespace JSXElements {
    export interface HivePdfViewerAttributes extends HTMLAttributes {
      'baseUrl'?: string;
      'cMapPacked'?: boolean;
      'cMapUrl'?: string;
      /**
       * The cursor tool that is enabled upon load.\n 0 = Text selection tool.\n 1 = Hand tool.
       */
      'cursorToolOnLoad'?: 0 | 1;
      /**
       * Default zoom level of the viewer. Accepted values: 'auto', 'page-actual', 'page-width', 'page-height', 'page-fit', or a zoom level in percents.
       */
      'defaultZoomValue'?: string;
      'disableAutoFetch'?: boolean;
      'disableCreateObjectURL'?: boolean;
      /**
       * Whether to disable @font-face and fall back to canvas rendering (this is more resource-intensive).
       */
      'disableFontFace'?: boolean;
      'disableHistory'?: boolean;
      'disablePageLabels'?: boolean;
      'disablePageMode'?: boolean;
      /**
       * Whether to disable range requests (not recommended).
       */
      'disableRange'?: boolean;
      /**
       * Whether to disable streaming for requests (not recommended).
       */
      'disableStream'?: boolean;
      /**
       * Whether to prevent the extension from reporting the extension and browser version to the extension developers.
       */
      'disableTelemetry'?: boolean;
      /**
       * When enabled, pages whose orientation differ from the first page are rotated when printed.
       */
      'enablePrintAutoRotate'?: boolean;
      /**
       * Whether to enable WebGL.
       */
      'enableWebGL'?: boolean;
      'externalLinkRel'?: 'noopener' | 'noreferrer' | 'nofollow';
      /**
       * Controls how external links will be opened.\n 0 = default.\n 1 = replaces current window.\n 2 = new window/tab.\n 3 = parent.\n 4 = in top window.
       */
      'externalLinkTarget'?: 0 | 1 | 2 | 3 | 4;
      'imageResourcesPath'?: string;
      'locale'?: string;
      'maxCanvasPixels'?: number;
      'onFirstPage'?: (event: CustomEvent) => void;
      'onPageChange'?: (event: CustomEvent) => void;
      'onProgressChange'?: (event: CustomEvent) => void;
      'page'?: number;
      /**
       * Whether to enable debugging tools.
       */
      'pdfBugEnabled'?: boolean;
      'renderInteractiveForms'?: boolean;
      'renderer'?: 'canvas' | 'svg';
      /**
       * Controls how the viewer scrolls upon load.\n 0 = Vertical scrolling.\n 1 = Horizontal scrolling.\n 2 = Wrapped scrolling.
       */
      'scrollModeOnLoad'?: number;
      /**
       * Whether to view PDF documents in the last page and position upon opening the viewer.
       */
      'showPreviousViewOnLoad'?: boolean;
      /**
       * Controls the state of the sidebar upon load.\n 0 = do not show sidebar.\n 1 = show thumbnails in sidebar.\n 2 = show document outline in sidebar.\n 3 = Show attachments in sidebar.
       */
      'sidebarViewOnLoad'?: 0 | 1 | 2 | 3;
      'singlePageMode'?: boolean;
      /**
       * "Whether the viewer should join pages into spreads upon load.\n 0 = No spreads.\n 1 = Odd spreads.\n 2 = Even spreads.
       */
      'spreadModeOnLoad'?: 0 | 1 | 2;
      'supportsPrinting'?: boolean;
      /**
       * Controls if the text layer is enabled, and the selection mode that is used.\n 0 = Disabled.\n 1 = Enabled.\n 2 = (Experimental) Enabled, with enhanced text selection.
       */
      'textLayerMode'?: 0 | 1 | 2;
      'url'?: string | Uint8Array | PDFSource;
      'useOnlyCssZoom'?: boolean;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;